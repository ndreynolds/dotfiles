" .vimrc
" Author:     Nick Reynolds <ndreynolds@gmail.com>
" Repository: http://github.com/ndreynolds/dotfiles


" Plugins ------------------------------------------------------- {{{

set shell=/bin/sh
set nocompatible

if !filereadable($HOME . '/.local/share/nvim/site/autoload/plug.vim')
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.local/share/nvim/plugged')

" Language Support ---------------------------------------------

Plug 'dag/vim-fish'
" Plug 'ecomba/vim-ruby-refactoring'
Plug 'fatih/vim-go'
" Plug 'jcf/vim-latex'
" Plug 'lukaszb/vim-web-indent'
" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'
" Plug 'othree/xml.vim'
" Plug 'mustache/vim-mustache-handlebars'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-markdown'
" Plug 'chrisbra/csv.vim'
" Plug 'eagletmt/neco-ghc'
" Plug 'vim-pandoc/vim-pandoc'
" Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'elixir-editors/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'wting/rust.vim'
Plug 'metakirby5/codi.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'parsonsmatt/intero-neovim'

" Colorschemes / Visual ----------------------------------------

Plug 'KeitaNakamura/neodark.vim'
" Plug 'bling/vim-airline'
Plug 'itchyny/lightline.vim'

" Motions / Text Objects / Mappings ----------------------------

" Plug 'bkad/CamelCaseMotion'
" Plug 'godlygeek/tabular'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'nelstrom/vim-visual-star-search'
" Plug 'lokaltog/vim-easymotion'
Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'

" Utilities ----------------------------------------------------

" Plug 'bogado/file-line'
Plug 'kopischke/vim-fetch'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" Plug 'neomake/neomake'
" Plug 'majutsushi/tagbar'
Plug 'sjl/gundo.vim'
" Plug 'tpope/vim-dispatch'
" Plug 'radenling/vim-dispatch-neovim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
" Plug 'scrooloose/nerdtree'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins', 'on': [] }
" Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/renamer.vim'
Plug 'w0rp/ale'

call plug#end()

" }}}


" Options ------------------------------------------------------- {{{

syntax on
set number
set tabstop=4
set expandtab
set shiftwidth=4

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest:full,full

set wildignore+=.git,.svn,.hg,.pyc,.sw?
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set mouse=a
set iskeyword+=\-

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set foldmethod=marker

" Store swap, backup and undo files within .vim/
" Make the directories as needed.

if !isdirectory($HOME . '/.vim/swap')
  :silent !mkdir -p ~/.vim/swap > /dev/null 2>&1
endif
set dir=~/.vim/swap

if !isdirectory($HOME . '/.vim/backup')
  :silent !mkdir -p ~/.vim/backup > /dev/null 2>&1
endif
set backupdir=~/.vim/backup
set backup

if exists("+undofile")
  if !isdirectory($HOME . '/.vim/undo')
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=~/.vim/undo
  set undofile
endif

" }}}


" Plugin Configuration ------------------------------------------- {{{

" colorscheme
" if has('termguicolors')
"   set termguicolors
" endif
let g:neodark#use_custom_terminal_theme = 1
set background=dark
colorscheme neodark

" rsi
let g:rsi_no_meta = 1

" fzf
let g:fzf_files_options = '--preview "ccat --color=always {}"'

" deoplete
let g:deoplete#enable_at_startup = 1


" }}}


" Mappings ------------------------------------------------------- {{{

" Set leader to ,
let mapleader = ","
let maplocalleader = ","

" Make Y behave like C & D
nnoremap Y y$

" Shortcut for the directory of the current file
cnoremap %/ <c-r>=expand('%:p:h')<CR>/

" Clear search highlighting
nnoremap <silent> <c-l> :nohl<CR><c-l>

" CTRL-{j,k,l,h} to switch windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h

" Catch accidental shift keys
command! -bang -nargs=* -complete=file E e<bang> <args>
command! -bang -nargs=* -complete=file W w<bang> <args>
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file Wqa wqa<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
command! -bang -nargs=* -complete=file Q q<bang> <args>
command! -bang -nargs=* -complete=file Vsp vsp<bang> <args>

" Reflow text to 80 cols
nnoremap <leader>sw :set textwidth=80<cr>:normal! gggqG<esc>

" Write file with 'eventignore' set.
cnoremap w-- noautocmd w

" Edit vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>

" Source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" FZF
nnoremap <leader><leader> :Files<cr>
nnoremap <leader>n :FZF ~/repos/notes<cr>
nnoremap <leader>t :Tags<cr>

" Pretty print JSON and XML
nnoremap <leader>j :%!python -m json.tool<cr>
vnoremap <leader>j :!python -m json.tool<cr>
nnoremap <leader>x :%!tidy -i -q -asxhtml -utf8<cr>
vnoremap <leader>x :!tidy -i -q -xml -utf8<cr>

" * and # in visual mode search for the selection (from Practical Vim)
xnoremap * :<c-u>call <sid>VSetSearch()<cr>/<c-r>=@/<cr><cr>
xnoremap # :<c-u>call <sid>VSetSearch()<cr>?<c-r>=@/<cr><cr>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" <ctrl-c> to redraw screen
nnoremap <c-c> :redraw!<cr>

" }}}


" Statusline ----------------------------------------------------- {{{

" }}}


" Misc ----------------------------------------------------------- {{{

" Highlight lines longer than 80 chars
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}


" Abbreviations -------------------------------------------------- {{{

iabbrev @@ ndreynolds@gmail.com
iabbrev ndr Nick Reynolds
iabbrev <expr> dts strftime("%c")
iabbrev <expr> sig 'Nick Reynolds (' . strftime("%c") . ')'
iabbrev iexpr require IEx<cr>IEx.pry

" }}}


" Event Autocommands --------------------------------------------- {{{

" Resize splits on window resize
au VimResized * :wincmd =
"
" au BufNewFile,BufRead *.txt set filetype=markdown
" au BufNewFile,BufRead *.json set filetype=javascript
" au BufNewFile,BufRead *.h set filetype=c
"
au QuickFixCmdPost *grep* cwindow

au BufWritePre * :%s/\s\+$//e

autocmd InsertEnter * call plug#load('deoplete.nvim')

" }}}


" FileType Autocommands ------------------------------------------ {{{

augroup FTOptions
"   au Filetype python                   setlocal ai et sta sw=4 sts=4 tw=79
"   au Filetype cpp,cs,java              setlocal ai et sta sw=4 sts=4 cin

  au Filetype c,ruby,coffee,jsx,css,scss,less,eruby,haml,html,xhtml,eruby,yaml,json,vim,markdown,sh,bash,zsh
    \ setlocal ai et sta sw=2 sts=2

  au FileType gitcommit,markdown,ruby,haml
    \ setlocal spell

"   au FileType haskell                  setlocal omnifunc=necoghc#omnifunc
"   au FileType crontab                  set nobackup nowritebackup
"   au FileType help                     nnoremap <silent><buffer> q :q<cr>

  au FileType ruby,eruby
                    \ set omnifunc=rubycomplete#Complete       |
                    \ let g:rubycomplete_buffer_loading = 1    |
                    \ let g:rubycomplete_classes_in_global = 1 |
                    \ let g:rubycomplete_rails = 1
augroup END

" }}}
